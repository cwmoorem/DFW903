<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../pcf.xsd">
  <ListViewPanel
    id="DesktopAssignableQueuesLV">
    <ExposeIterator
      flags="assignableActivity"
      valueType="entity.Activity"
      widget="DesktopAssignableQueuesLV"/>
    <Variable
      initialValue="getVisibleQueues()"
      name="queues"
      type="AssignableQueue[]"/>
    <Variable
      initialValue="Activity.finder.findActivitiesByQueues(queues)"
      name="activities"
      type="gw.api.database.IQueryBeanResult&lt;Activity&gt;"/>
    <Variable
      initialValue="new gw.api.filters.AssignableQueueFilters(queues)"
      name="aQFilterSet"
      type="gw.api.filters.AssignableQueueFilters"/>
    <RowIterator
      checkBoxVisible="perm.Activity.pickfromqueue"
      editable="false"
      elementName="activity"
      hasCheckBoxes="true"
      value="activities"
      valueType="gw.api.database.IQueryBeanResult&lt;entity.Activity&gt;">
      <ToolbarFilter
        name="assignableQueueFilter">
        <ToolbarFilterOption
          filter="gw.api.util.CoreFilters.ALL"
          label="DisplayKey.get(&quot;Web.DesktopAssignableQueues.Filter.All&quot;)"/>
        <ToolbarFilterOptionGroup
          filters="aQFilterSet.Filters.toTypedArray()"/>
      </ToolbarFilter>
      <ToolbarFlag
        name="assignableActivity"/>
      <IteratorSort
        sortBy="activity.Priority"
        sortOrder="1"/>
      <IteratorSort
        sortBy="activity.TargetDate"
        sortOrder="2"/>
      <Row>
        <BooleanRadioCell
          enableSort="false"
          icon="&quot;new.png&quot;"
          id="UpdatedSinceLastViewed"
          tooltip="DisplayKey.get(&quot;Web.DesktopActivitiesLV.NewActivityTooltip&quot;)"
          value="activity.UpdatedSinceLastViewed"/>
        <BooleanRadioCell
          enableSort="false"
          icon="&quot;escalated.png&quot;"
          id="Overdue"
          tooltip="DisplayKey.get(&quot;Web.DesktopActivitiesLV.EscalatedActivityTooltip&quot;)"
          value="activity.Overdue"/>
        <DateCell
          id="Due"
          label="DisplayKey.get(&quot;Web.DesktopActivitiesLV.DueDate&quot;)"
          value="activity.TargetDate"/>
        <TypeKeyCell
          id="Priority"
          label="DisplayKey.get(&quot;Web.DesktopActivitiesLV.Priority&quot;)"
          value="activity.Priority"
          valueType="typekey.Priority"/>
        <TypeKeyCell
          id="Status"
          label="DisplayKey.get(&quot;Web.DesktopActivitiesLV.Status&quot;)"
          value="activity.Status"
          valueType="typekey.ActivityStatus"/>
        <TextCell
          action="ActivityForward.go(activity)"
          available="perm.Activity.edit(activity)"
          id="Subject"
          label="DisplayKey.get(&quot;Web.DesktopActivitiesLV.Subject&quot;)"
          value="activity.Subject"/>
        <TextCell
          enableSort="false"
          id="JobID"
          label="DisplayKey.get(&quot;Web.DesktopActivitiesLV.ID&quot;)"
          value="activity.Job.PolicyNumberOrJobNumber"/>
        <TextCell
          enableSort="false"
          id="Insured"
          label="DisplayKey.get(&quot;Web.DesktopActivitiesLV.AccountHolder&quot;)"
          value="activity.Job.Policy.Account.AccountHolderContact.Name == null ? activity.Account.AccountHolderContact.DisplayName : activity.Job.Policy.Account.AccountHolderContact.Name"/>
        <TextCell
          id="Product"
          label="DisplayKey.get(&quot;Web.DesktopActivitiesLV.Product&quot;)"
          sortBy="activity.Job.Policy.ProductCode"
          value="activity.Job.Policy.Product"
          valueType="gw.api.productmodel.Product"/>
        <AltUserCell
          id="AssignedBy"
          label="DisplayKey.get(&quot;Web.DesktopActivitiesLV.AssignedBy&quot;)"
          value="activity.AssignedByUser"/>
        <TypeKeyCell
          enableSort="false"
          id="State"
          label="DisplayKey.get(&quot;Web.DesktopActivitiesLV.State&quot;)"
          value="activity.Job.Policy.Account.AccountHolderContact.PrimaryAddress.State"
          valueType="typekey.State"/>
      </Row>
    </RowIterator>
    <Code><![CDATA[// The results are needed all at once because the array will be reused to avoid querying twice.
      function getVisibleQueues() : AssignableQueue[] {
        var retValue = new java.util.ArrayList<AssignableQueue>()
        var processor = AssignableQueue.finder.findVisibleQueuesInUserAndAncestorGroups(User.util.CurrentUser) as gw.api.database.IQueryBeanResult<AssignableQueue>
        foreach (i in processor.iterator()) {
          retValue.add(i)
        }
        return retValue?.toTypedArray()
      }]]></Code>
  </ListViewPanel>
</PCF>